"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = require("os");
const livesync_service_1 = require("./livesync-service");
class DebugLiveSyncService extends livesync_service_1.LiveSyncService {
    constructor($platformService, $projectDataService, $devicesService, $mobileHelper, $devicePlatformsConstants, $nodeModulesDependenciesBuilder, $logger, $processService, $hooksService, $pluginsService, $injector, $options, $debugDataService, $projectData, $debugService, $config) {
        super($platformService, $projectDataService, $devicesService, $mobileHelper, $devicePlatformsConstants, $nodeModulesDependenciesBuilder, $logger, $processService, $hooksService, $pluginsService, $injector);
        this.$platformService = $platformService;
        this.$devicesService = $devicesService;
        this.$logger = $logger;
        this.$injector = $injector;
        this.$options = $options;
        this.$debugDataService = $debugDataService;
        this.$projectData = $projectData;
        this.$debugService = $debugService;
        this.$config = $config;
    }
    refreshApplication(projectData, liveSyncResultInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            const debugOptions = this.$options;
            const deployOptions = {
                clean: this.$options.clean,
                device: this.$options.device,
                emulator: this.$options.emulator,
                platformTemplate: this.$options.platformTemplate,
                projectDir: this.$options.path,
                release: this.$options.release,
                provision: this.$options.provision,
                teamId: this.$options.teamId
            };
            let debugData = this.$debugDataService.createDebugData(this.$projectData, { device: liveSyncResultInfo.deviceAppData.device.deviceInfo.identifier });
            const debugService = this.$debugService.getDebugService(liveSyncResultInfo.deviceAppData.device);
            yield this.$platformService.trackProjectType(this.$projectData);
            if (this.$options.start) {
                return this.printDebugInformation(yield debugService.debug(debugData, debugOptions));
            }
            const deviceAppData = liveSyncResultInfo.deviceAppData;
            this.$config.debugLivesync = true;
            yield debugService.debugStop();
            let applicationId = deviceAppData.appIdentifier;
            yield deviceAppData.device.applicationManager.stopApplication(applicationId, projectData.projectName);
            const buildConfig = _.merge({ buildForDevice: !deviceAppData.device.isEmulator }, deployOptions);
            debugData.pathToAppPackage = this.$platformService.lastOutputPath(debugService.platform, buildConfig, projectData);
            this.printDebugInformation(yield debugService.debug(debugData, debugOptions));
        });
    }
    printDebugInformation(information) {
        if (!!information) {
            this.$logger.info(`To start debugging, open the following URL in Chrome:${os_1.EOL}${information}${os_1.EOL}`.cyan);
        }
    }
}
exports.DebugLiveSyncService = DebugLiveSyncService;
$injector.register("debugLiveSyncService", DebugLiveSyncService);
